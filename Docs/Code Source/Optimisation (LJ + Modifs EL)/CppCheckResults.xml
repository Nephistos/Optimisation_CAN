<?xml version="1.0" encoding="UTF-8" ?>
<results>
    <error file="Architecture.cpp" line="442" id="variableScope" severity="style" msg="The scope of the variable &apos;ipar&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="Architecture.cpp" line="460" id="variableScope" severity="style" msg="The scope of the variable &apos;ipar&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="Architecture.cpp" line="500" id="variableScope" severity="style" msg="The scope of the variable &apos;iCurFrameHostCopy&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="Calc.cpp" line="62" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="Calc.cpp" line="87" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="Calc.cpp" line="17" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;param_recieved&apos; a value by passing the value to the constructor in the initialization list." />
    <error file="Calc.cpp" line="18" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;freq_request&apos; a value by passing the value to the constructor in the initialization list." />
    <error file="Calc.cpp" line="19" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;connected_SN&apos; a value by passing the value to the constructor in the initialization list." />
    <error file="Calc.cpp" line="33" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;param_recieved&apos; a value by passing the value to the constructor in the initialization list." />
    <error file="Calc.cpp" line="34" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;freq_request&apos; a value by passing the value to the constructor in the initialization list." />
    <error file="Calc.cpp" line="35" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;connected_SN&apos; a value by passing the value to the constructor in the initialization list." />
    <error file="Criteria.cpp" line="16" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;loads&apos; a value by passing the value to the constructor in the initialization list." />
    <error file="Element.cpp" line="6" id="uninitMemberVar" severity="style" msg="Member variable &apos;Element::id&apos; is not initialized in the constructor." />
    <error file="IOManagement.cpp" line="439" id="variableScope" severity="style" msg="The scope of the variable &apos;nbFrame&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="IOManagement.cpp" line="724" id="unreadVariable" severity="style" msg="Variable &apos;icalc&apos; is assigned a value that is never used." />
    <error file="IOManagement.cpp" line="647" id="passedByValue" severity="style" msg="Parameter &apos;nameUserDefTopoFile&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="Parameter.cpp" line="13" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;calc_target&apos; a value by passing the value to the constructor in the initialization list." />
    <error file="Parameter.cpp" line="14" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;freq_request_target&apos; a value by passing the value to the constructor in the initialization list." />
    <error file="Parameter.cpp" line="15" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;frame_host&apos; a value by passing the value to the constructor in the initialization list." />
    <error file="Parameter.cpp" line="16" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;size_request&apos; a value by passing the value to the constructor in the initialization list." />
    <error file="PathFrame.cpp" line="93" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="PathFrame.cpp" line="103" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="PathFrame.cpp" line="115" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="PathFrame.cpp" line="120" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="PathFrame.cpp" line="125" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="PathFrame.cpp" line="128" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="PathFrame.cpp" line="131" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="PathFrame.cpp" line="132" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="PathFrame.cpp" line="174" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="PathFrame.cpp" line="158" id="redundantAssignment" severity="style" msg="Variable &apos;success&apos; is reassigned a value before the old one has been used." />
    <error file="Solver.cpp" line="1065" id="variableScope" severity="style" msg="The scope of the variable &apos;iChosenFrame&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="Solver.cpp" line="366" id="unusedVariable" severity="style" msg="Unused variable: time_tabu" />
    <error file="Solver.cpp" line="682" id="unusedVariable" severity="style" msg="Unused variable: time_tabu" />
    <error file="SubNet.cpp" line="64" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="main.cpp" line="369" id="unusedVariable" severity="style" msg="Unused variable: pathFrameData" />
    <error file="IOManagement.h" line="124" id="passedByValue" severity="style" msg="Parameter &apos;nameUserDefTopoFile&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="PathFrame.cpp" line="72" id="unusedFunction" severity="style" msg="The function &apos;addElement&apos; is never used." />
    <error file="Architecture.cpp" line="637" id="unusedFunction" severity="style" msg="The function &apos;clearNetwork&apos; is never used." />
    <error file="PathFrame.cpp" line="203" id="unusedFunction" severity="style" msg="The function &apos;compareLoads&apos; is never used." />
    <error file="Connection.h" line="24" id="unusedFunction" severity="style" msg="The function &apos;getConCalc&apos; is never used." />
    <error file="Connection.h" line="25" id="unusedFunction" severity="style" msg="The function &apos;getConSN&apos; is never used." />
    <error file="Calc.h" line="39" id="unusedFunction" severity="style" msg="The function &apos;getIdCalc&apos; is never used." />
    <error file="SubNet.h" line="32" id="unusedFunction" severity="style" msg="The function &apos;getIdNUMSubNet&apos; is never used." />
    <error file="SubNet.h" line="33" id="unusedFunction" severity="style" msg="The function &apos;getIdSubNet&apos; is never used." />
    <error file="Calc.h" line="48" id="unusedFunction" severity="style" msg="The function &apos;getNbParamTransmitted&apos; is never used." />
    <error file="Frame.h" line="62" id="unusedFunction" severity="style" msg="The function &apos;getSizeFragment&apos; is never used." />
    <error file="Parameter.h" line="54" id="unusedFunction" severity="style" msg="The function &apos;getSizeRequest&apos; is never used." />
    <error file="Connection.h" line="23" id="unusedFunction" severity="style" msg="The function &apos;getisFixed&apos; is never used." />
    <error file="Frame.cpp" line="345" id="unusedFunction" severity="style" msg="The function &apos;isFrameValid&apos; is never used." />
    <error file="PathFrame.cpp" line="79" id="unusedFunction" severity="style" msg="The function &apos;remElement&apos; is never used." />
    <error file="Criteria.h" line="21" id="unusedFunction" severity="style" msg="The function &apos;setCost&apos; is never used." />
    <error file="PathFrame.h" line="39" id="unusedFunction" severity="style" msg="The function &apos;setElementList&apos; is never used." />
    <error file="PathFrame.h" line="31" id="unusedFunction" severity="style" msg="The function &apos;setFrame&apos; is never used." />
    <error file="Parameter.h" line="50" id="unusedFunction" severity="style" msg="The function &apos;setFreqTarget&apos; is never used." />
    <error file="Frame.h" line="51" id="unusedFunction" severity="style" msg="The function &apos;setFreqTransmission&apos; is never used." />
    <error file="Frame.h" line="49" id="unusedFunction" severity="style" msg="The function &apos;setIdFrame&apos; is never used." />
    <error file="Parameter.h" line="38" id="unusedFunction" severity="style" msg="The function &apos;setIdParam&apos; is never used." />
    <error file="Calc.h" line="47" id="unusedFunction" severity="style" msg="The function &apos;setIsBridge&apos; is never used." />
    <error file="Element.h" line="26" id="unusedFunction" severity="style" msg="The function &apos;setIsSubNet&apos; is never used." />
    <error file="PathFrame.h" line="37" id="unusedFunction" severity="style" msg="The function &apos;setLength&apos; is never used." />
    <error file="Criteria.h" line="24" id="unusedFunction" severity="style" msg="The function &apos;setLoads&apos; is never used." />
    <error file="SubNet.h" line="35" id="unusedFunction" severity="style" msg="The function &apos;setNbCalc&apos; is never used." />
    <error file="Frame.h" line="57" id="unusedFunction" severity="style" msg="The function &apos;setNbFragment&apos; is never used." />
    <error file="Parameter.h" line="44" id="unusedFunction" severity="style" msg="The function &apos;setNbFramesHost&apos; is never used." />
    <error file="Calc.h" line="49" id="unusedFunction" severity="style" msg="The function &apos;setNbParamTransmitted&apos; is never used." />
    <error file="Frame.h" line="55" id="unusedFunction" severity="style" msg="The function &apos;setNbTarget&apos; is never used." />
    <error file="Parameter.h" line="40" id="unusedFunction" severity="style" msg="The function &apos;setSize&apos; is never used." />
    <error file="Frame.h" line="63" id="unusedFunction" severity="style" msg="The function &apos;setSizeFragment&apos; is never used." />
    <error file="Parameter.h" line="55" id="unusedFunction" severity="style" msg="The function &apos;setSizeRequest&apos; is never used." />
    <error file="PathFrame.h" line="33" id="unusedFunction" severity="style" msg="The function &apos;setSource&apos; is never used." />
    <error file="PathFrame.h" line="35" id="unusedFunction" severity="style" msg="The function &apos;setTarget&apos; is never used." />
    <error file="Parameter.cpp" line="65" id="unusedFunction" severity="style" msg="The function &apos;swapUniqueHost&apos; is never used." />
    <error id="missingIncludeSystem" severity="style" msg="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config." />
</results>
